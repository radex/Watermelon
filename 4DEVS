     #### ##### #   # #        ##### ### ####    ##   #    # ###   ##
    #    #  #   #   # #        #    # # #    #  #  #  ##   #  #   #  #
    #       #   #   # #        #    # # #      #    # # #  #  #  #    #
     ####   #    ###  #        #####  #  ####  ###### #  # #  #  ######
         #  #     #   #        #      #      # #    # #   ##  #  #    #
    #    #  #     #   #        #      # #    # #    # #    #  #  #    #
     ####   #     #   ######   #     ### ####  #    # #    # ### #    #

                STYL PISANIA KODU WATERMELON CMS-A
                                                     PRAWIE GOTOWE ...
                      LEKTURA OBOWIĄZKOWA!
____________________________________________________________________________

   To jest obowiązyjący dla programistów Watermelon CMS-a styl programowa-
   nia. Jednolity styl poprawia wygląd kodu i ułatwia jego późniejszą refa-
   ktoryzację. Jeśli zauważysz, że ktoś zrobił inaczej, popraw.

   1. Wygląd kodu

      a) Taby

         Nie ma tabów. Zamiast tabów trzy spacje!

      b) Klamerki

         Typowy styl - przed i po klamerce enter.

         if(blablabla)
         {
            test();
         }
         else
         {
            test();
         }

      c) Operatory

         Przed i po operatorze spacja.

            $abcde = $x + ( 6 + 2 ) . 'abc';

         Co do nawiasów - dotyczy tylko wyrażeń, czyli:

            if(abc);

         oraz

            jakas_funkcja(); // nie robimy po nazwie funkcji spacji -
                             // według nas jest to psucie czytelności.

         ale

            $test = ( $a * $h ) / 2;

         Pisanie spacji nie dotyczy operatorów zasięgu ( "::" oraz "->" )
         
         Foo::Bar();
         $foo->bar();

         Po przecinku zawsze spacja!

            funkcja(6, 8, 2);

      d) Stringi

         Normalnie używamy do stringów apostrofów. Cudzysłowy używamy dla
         zapytań SQL, oraz tam gdzie to konieczne (np. "\n")

      e) Stałe itp.

         Stałe piszemy także dużymi literami. Stałe samego CMS-a zaczynają
         się od WTRMLN_

         Stałe są używane tylko przez sam CMS. Moduły nie korzystają ze
         stałych, ponieważ jest to mało wygodne i mało elastyczne. Jeśli
         jednak z jakiegoś powodu MUSISZ (np. dla testów) użyć stałej, to
         dodaj do niej prefiks, żeby nie kolidowała z niczym innym.

   2. Styl programowania

      a) Pobieranie danych z DB

         Dane z bazy danych pobieramy do obiektu. Nie pobieramy nic przez
         funkcję mysql_result. Ewentualnie można użyć tablicy zamiast
         obiektu, ale raczej preferujemy obiekty (kod wygląda czytelniej)

         Przykład pobrania danych, które jest OK:

            $data = $this->db->query("SELECT * FROM `test`");

            while($item = $data->to_obj())
            {
               echo $data->text;
            }

      b) Działania na tablicach

         Jeśli chcesz przejść po wszystkich elementach tablicy użyj foreach,
         ponieważ jest dużo czytelniejsze od for. Ewentualnie można użyć
         funkcji typu array_map, ale jest to raczej mniej wygodne i mniej
         czytelne.

         DOBRZE:

            foreach($array as $item)
            {
               echo $item;
            }

         ŹLE:

            for($i = 0 ; $i < count($array) ; $i++)
            {
               echo $array[$i];
            }

         Myślę, że różnica czytelności obu przykładów pokazuje, dlaczego
         prawie zawsze lepiej użyć foreach ;)

      c) Globale

         Nie używamy słowa kluczowego global. To jest stare rozwiązanie.
         Wydaje się proste w użyciu i wygodne, ale w rzeczywistości powoduje
         śmietnik w kodzie. Po za tym AFAIK od PHP6 nie będzie już globali.
         Zamiast globali można użyć właściwości klas, słowa kluczowego
         static, rejestru (wzorzec projektowy registry) itp. Można by było
         też użyć singletona, ale w Watermelonie NIE UŻYWAMY singletona.
         
      d) Pętle for
         
         W pętlach for liczbę iteracji piszemy przed pierwszym średnikiem, a
         po nim jedynie robimy porównanie dwóch zmiennych.
         
         DOBRZE:

            for($i = 0, $j = count($array) ; $i < $j ; $i++)
            {
               echo $array[$i];
            }
            
         ŹLE:

            for($i = 0 ; $i < count($array) ; $i++)
            {
               echo $array[$i];
            }
            
         Ot, taki dobry nawyk. Po co po każdej iteracji ma wykonywać jakąś
         funkcję (w tym przypadku count()), skoro zwracana wartość jest
         stała...

   3. Pozostałe

      Wszystkie pliki zapisujemy z kodowaniem UTF-8 i uniksowymi enterami,
      tzn. \n, nie \r\n jak w Windowsie.

      